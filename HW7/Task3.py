# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.

# Сложение. Объединение двух клеток.
# При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.

# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только
# если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.

# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.

# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

# В классе необходимо реализовать метод make_order(),
# принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****...,
# где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:

    def __init__(self, unit):
        self.unit = unit

    def __add__(self, other):
        self.unit + other.unit

    def __sub__(self, other):
        if (self.unit - other.unit) > 0:
            self.unit - other.unit
        else:
            print('Разность ниже нуля')

    def __mul__(self, other):
        new_cell = Cell(self.unit * other.unit)
        print(f'New Cell = {new_cell.unit}')

    def __truediv__(self, other):
        new_cell = Cell(self.unit / other.unit)
        print('New Cell = {:.0f}'.format(round(new_cell.unit, 0)))

    def make_order(self, unit_line):
        self.unit_line = unit_line
        order = ['*' * unit_line for i in range(int(self.unit / unit_line))]
        if int(self.unit % unit_line):
            j = '*' * int(self.unit % unit_line)
            order.append(j)
        print(*order, sep='\\n')
        # print('\\n'.join(order))

cell_1 = Cell(10)

cell_2 = Cell(3)

cell_1 * cell_2
cell_1 / cell_2

cell_1.make_order(3)
